@page "/Account/ExternalLogin"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using iServiceSeeker1Sep.Data
@using iServiceSeeker1Sep.Services

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject AuthMethodLinkingService LinkingService

<PageTitle>External Login</PageTitle>

<StatusMessage Message="@message" />

@if (isLinkingMode)
{
    <h1>Link External Account</h1>
    <h2>Link your @ProviderDisplayName account to your existing profile.</h2>

    <div class="alert alert-info">
        You're about to link your <strong>@ProviderDisplayName</strong> account to your existing profile.
        This will allow you to sign in using either method in the future.
    </div>

    <div class="d-flex gap-3">
        <button type="button" class="btn btn-primary" @onclick="ConfirmLinking">
            Yes, Link Account
        </button>
        <a href="/Account/Manage" class="btn btn-secondary">Cancel</a>
    </div>
}
else
{
    <h1>Register</h1>
    <h2>Associate your @ProviderDisplayName account.</h2>
    <hr />

    <div class="alert alert-info">
        You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
        @if (existingUserWithEmail != null)
        {
            <div class="mt-2">
                <strong>We found an existing account with this email address.</strong>
                You can either link this @ProviderDisplayName account to your existing profile,
                or create a separate account with a different email.
            </div>
        }
        else
        {
            <div class="mt-2">
                Please confirm your email address below and click Register to finish logging in.
            </div>
        }
    </div>

    @if (existingUserWithEmail != null)
    {
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Link to Existing Account</h5>
                <p class="card-text">
                    Link this @ProviderDisplayName account to your existing profile for <strong>@existingUserWithEmail.Email</strong>.
                    You'll be able to sign in using either method.
                </p>
                <button type="button" class="btn btn-primary" @onclick="() => LinkToExistingAccount(existingUserWithEmail)">
                    Link Accounts
                </button>
            </div>
        </div>

        <div class="text-center mb-3">
            <span class="text-muted">— OR —</span>
        </div>
    }

    <div class="row">
        <div class="col-md-6">
            <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control"
                               autocomplete="email" placeholder="Please enter your email." />
                    <label for="Input.Email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" />
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-success" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    Create New Account
                </button>
            </EditForm>
        </div>
    </div>
}

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo? externalLoginInfo;
    private ApplicationUser? existingUserWithEmail;
    private bool isLinkingMode = false;
    private bool isProcessing = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo?.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        if (externalLoginInfo is null) return;

        // Try to sign in existing user
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation("{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }

        // Check if we're in linking mode (user is already signed in)
        var currentUser = await UserManager.GetUserAsync(HttpContext.User);
        if (currentUser != null)
        {
            isLinkingMode = true;
            StateHasChanged();
            return;
        }

        // Pre-populate email and check for existing user
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            var email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email);
            Input.Email = email ?? "";

            if (!string.IsNullOrEmpty(email))
            {
                existingUserWithEmail = await UserManager.FindByEmailAsync(email);
            }
        }
    }

    private async Task ConfirmLinking()
    {
        if (externalLoginInfo is null) return;

        isProcessing = true;
        var currentUser = await UserManager.GetUserAsync(HttpContext.User);

        if (currentUser == null)
        {
            message = "Error: You must be signed in to link accounts.";
            isProcessing = false;
            return;
        }

        var result = await LinkingService.LinkExternalAccountAsync(currentUser, externalLoginInfo);

        if (result.Succeeded)
        {
            RedirectManager.RedirectToWithStatus("Account/Manage",
                $"Your {ProviderDisplayName} account has been linked successfully.", HttpContext);
        }
        else
        {
            message = $"Error linking account: {string.Join(", ", result.Errors.Select(e => e.Description))}";
        }

        isProcessing = false;
    }

    private async Task LinkToExistingAccount(ApplicationUser existingUser)
    {
        if (externalLoginInfo is null) return;

        isProcessing = true;

        var result = await LinkingService.LinkExternalAccountAsync(existingUser, externalLoginInfo);

        if (result.Succeeded)
        {
            await SignInManager.SignInAsync(existingUser, isPersistent: false, externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            message = $"Error linking to existing account: {string.Join(", ", result.Errors.Select(e => e.Description))}";
        }

        isProcessing = false;
    }

    private async Task OnValidSubmitAsync()
    {
        if (externalLoginInfo is null) return;

        isProcessing = true;
        var emailStore = GetEmailStore();
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        // Set primary auth method for external registration
        user.PrimaryAuthMethod = GetAuthenticationMethod(externalLoginInfo.LoginProvider);
        user.PrimaryAuthSetAt = DateTime.UtcNow;
        user.EmailConfirmed = true; // External auth users don't need email confirmation
        user.InitialEmailConfirmed = true;

        // Extract profile info from external provider
        ExtractProfileFromExternalProvider(user, externalLoginInfo);

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded)
            {
                Logger.LogInformation("User created account using {Name} provider.", externalLoginInfo.LoginProvider);

                await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
        isProcessing = false;
    }

    private void ExtractProfileFromExternalProvider(ApplicationUser user, ExternalLoginInfo info)
    {
        var givenName = info.Principal.FindFirstValue(ClaimTypes.GivenName);
        var surname = info.Principal.FindFirstValue(ClaimTypes.Surname);
        var fullName = info.Principal.FindFirstValue(ClaimTypes.Name);

        if (!string.IsNullOrEmpty(givenName))
            user.FirstName = givenName;
        else if (!string.IsNullOrEmpty(fullName))
        {
            var parts = fullName.Split(' ', 2);
            user.FirstName = parts[0];
            if (parts.Length > 1)
                user.LastName = parts[1];
        }

        if (!string.IsNullOrEmpty(surname))
            user.LastName = surname;
    }

    private AuthenticationMethod GetAuthenticationMethod(string provider)
    {
        return provider.ToLower() switch
        {
            "google" => AuthenticationMethod.Google,
            "linkedin" => AuthenticationMethod.LinkedIn,
            "microsoft" => AuthenticationMethod.Microsoft,
            _ => AuthenticationMethod.Local
        };
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. ");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}