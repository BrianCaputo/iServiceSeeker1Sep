@page "/complete-profile"
@using System.ComponentModel.DataAnnotations
@using iServiceSeeker1Sep.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<CompleteProfile> Logger

@rendermode InteractiveServer

<PageTitle>Complete Your Profile</PageTitle>

<AuthorizeView>
    <Authorized Context="Auth">
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-7">
                <div class="card shadow-sm">
                    <div class="card-body p-4 p-md-5">
                        <h1 class="card-title text-center mb-4">Complete Your Profile</h1>
                        <p class="text-center text-muted mb-4">Welcome, @Auth.User.Identity?.Name! Let's get your account set up.</p>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @errorMessage
                            </div>
                        }

                        <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="completeProfile">
                            <DataAnnotationsValidator />

                            @if (currentStep == 1)
                            {
                                <div class="text-center">
                                    <h5 class="mb-3">How will you be using our platform?</h5>
                                    <div class="d-grid gap-3">
                                        <button type="button" class="btn btn-primary btn-lg" @onclick="() => SelectUserType(UserType.EndUser)">
                                            I'm a Homeowner (or Client)
                                        </button>
                                        <button type="button" class="btn btn-success btn-lg" @onclick="() => SelectUserType(UserType.ServiceProvider)">
                                            I'm a Service Provider
                                        </button>
                                    </div>
                                </div>
                            }
                            else if (currentStep == 2 && Model.UserType == UserType.EndUser)
                            {
                                <h5 class="mb-3">Your Primary Address</h5>
                                <div class="form-floating mb-3">
                                    <select @bind="Model.CountryId" @bind:after="OnCountrySelected" @ValueChanged="OnCountrySelected()" class="form-select">
                                        <option value="0">Select a country...</option>
                                        @foreach (var country in countries)
                                        {
                                            <option value="@country.ID">@country.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-floating mb-3">
                                    <InputSelect @bind-Value="Model.StateProvinceId" class="form-select" disabled="@(Model.CountryId == 0)">
                                        <option value="0">Select a state/province...</option>
                                        @foreach (var state in filteredStates)
                                        {
                                            <option value="@state.ID">@state.Name</option>
                                        }
                                    </InputSelect>
                                    <label>State / Province</label>
                                </div>
                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="Model.StreetLine1" class="form-control" placeholder="Street Address" />
                                    <label>Street Address</label>
                                </div>
                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="Model.StreetLine2" class="form-control" placeholder="Street Address2" />
                                    <label>Street Address2</label>
                                </div>
                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="Model.City" class="form-control" placeholder="City" />
                                    <label>City</label>
                                </div>
                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="Model.PostalCode" class="form-control" placeholder="Postal Code" />
                                    <label>Postal Code</label>
                                </div>
                            }
                            else if (currentStep == 2 && Model.UserType == UserType.ServiceProvider)
                            {
                                <h5 class="mb-3">Company Information</h5>
                                <p>Are you joining an existing company or creating a new one?</p>
                                <InputRadioGroup Name="supplierAction" @bind-Value="Model.SupplierAction">
                                    <div class="form-check">
                                        <InputRadio id="join" Value="SupplierActionType.Join" class="form-check-input" />
                                        <label for="join" class="form-check-label">Join an existing company</label>
                                    </div>
                                    <div class="form-check mb-3">
                                        <InputRadio id="create" Value="SupplierActionType.Create" class="form-check-input" />
                                        <label for="create" class="form-check-label">Create a new company profile</label>
                                    </div>
                                </InputRadioGroup>
                                @if (Model.SupplierAction == SupplierActionType.Join)
                                {
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="Model.InvitationCode" class="form-control" placeholder="Invitation Code" />
                                        <label>Invitation Code</label>
                                        <div class="form-text">Your company administrator can provide this code.</div>
                                    </div>
                                }
                            }
                            else if (currentStep > 1)
                            {
                                <div class="mt-4 d-flex justify-content-between">
                                    <button type="button" class="btn btn-secondary" @onclick="() => currentStep = 1">Back</button>
                                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                        @if (isLoading)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span> Saving...</span>
                                        }
                                        else
                                        {
                                            <span>Finish and Save Profile</span>
                                        }
                                    </button>
                                </div>
                            }
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to complete your profile.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int currentStep = 1;
    private bool isLoading = false;
    private string? errorMessage;

    public string[] stateLabels = { "State", "Province", "Country" };
    public string stateLabel = "Select a country";

    public List<Country> countries = new();
    public List<StateProvince> allStates = new();
    public List<StateProvince> filteredStates = new();

    private int selectedCountryId = 0;
    private int selectedStateProvinceId = 0;

    [SupplyParameterFromForm]
    private ProfileCompleteModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // countries = await DbContext.Countries.OrderBy(c => c.Name).ToListAsync();
            countries = iServiceSeeker1Sep.Services.LocationDataSeeder.GetCountries();
            // allStates = await DbContext.StateProvinces.OrderBy(s => s.Name).ToListAsync();
            allStates = iServiceSeeker1Sep.Services.LocationDataSeeder.GetStateProvinces();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading location data for profile completion.");
            errorMessage = "Could not load necessary data. Please try again later.";
        }
    }

    private async Task OnCountrySelected()
    {
        if (Model.CountryId > 0)
        {
            filteredStates.Clear();
            // Filter states based on selected country  
            filteredStates = allStates.Where(s => s.CountryID == Model.CountryId).ToList();
            stateLabel=stateLabels[Model.CountryId - 1]; // Update state label based on selected country]
        }
        else
        {
            filteredStates.Clear();
        }
        Model.StateProvinceId = 0; // Reset state selection
        await Task.CompletedTask; // Ensure async method signature
    }

    private void SelectUserType(UserType userType)
    {
        Model.UserType = userType;
        currentStep = 2;
    }

    private void CountrySelected()
    {
        if (Model.CountryId > 0)
        {
            filteredStates = allStates.Where(s => s.CountryID == Model.CountryId).ToList();
        }
        else
        {
            filteredStates.Clear();
        }
        Model.StateProvinceId = 0; // Reset state selection
        StateHasChanged(); // Ensure UI updates
    }

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        errorMessage = null;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user is null)
        {
            NavigationManager.NavigateTo("/Account/InvalidUser");
            return;
        }

        try
        {
            user.UserType = (UserType)Model.UserType;

            if (Model.UserType == UserType.EndUser)
            {
                var address  = new Address
                {
                    Name = "Primary",
                    StreetLine1 = Model.StreetLine1,
                    StreetLine2 = Model.StreetLine2,
                    City = Model.City,
                    PostalCode = Model.PostalCode,
                    StateProvinceID = Model.StateProvinceId,
                };
            }
            else if (Model.UserType == UserType.ServiceProvider)
            {
                // TODO: Implement logic for invitation code validation or new company creation
            }

            user.IsProfileComplete = true;
            var result = await UserManager.UpdateAsync(user);

            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = $"Error: {string.Join(", ", result.Errors.Select(e => e.Description))}";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving profile for user {UserId}", user.Id);
            errorMessage = "A server error occurred while saving your profile. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public enum SupplierActionType { NotSet, Join, Create }

    public class ProfileCompleteModel
    {
        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Please select a role.")]
        public UserType UserType { get; set; } = UserType.NotSet;
        public string? StreetLine1 { get; set; }
        public string? StreetLine2 { get; set; }
        public string? City { get; set; }
        public string? PostalCode { get; set; }
        public int CountryId { get; set; }
        public int StateProvinceId { get; set; }

        // Service Provider Properties
        public SupplierActionType SupplierAction { get; set; } = SupplierActionType.Join;
        public string? InvitationCode { get; set; }
    }
}