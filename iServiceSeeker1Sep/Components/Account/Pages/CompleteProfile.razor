@page "/complete-profile"
@using System.ComponentModel.DataAnnotations
@using iServiceSeeker1Sep.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Complete Your Profile</PageTitle>

<AuthorizeView>
    <Authorized Context="Auth">
        <h1>Complete Your Profile</h1>
        <p>Welcome! Before you can continue, please provide a few more details.</p>

        <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="completeProfile">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (currentStep == 1)
            {
                <div class="card mb-4">
                    <div class="card-header">Step 1: Choose Your Role</div>
                    <div class="card-body">
                        <p>How will you primarily be using ServiceSeeker?</p>
                        <InputRadioGroup @bind-Value="Model.UserType">
                            <div class="form-check">
                                <InputRadio id="endUser" Value="UserType.EndUser" class="form-check-input" />
                                <label for="endUser" class="form-check-label">I'm looking for service providers (e.g., a homeowner).</label>
                            </div>
                            <div class="form-check">
                                <InputRadio id="serviceProvider" Value="UserType.ServiceProvider" class="form-check-input" />
                                <label for="serviceProvider" class="form-check-label">I am a service provider or part of a service company.</label>
                            </div>
                        </InputRadioGroup>
                    </div>
                </div>
                <button type="button" class="btn btn-primary" @onclick="() => currentStep = 2" disabled="@(Model.UserType == UserType.NotSet)">Next</button>
            }
            else if (currentStep == 2)
            {
                <div class="card">
                    <div class="card-header">Step 2: Add Your Primary Address</div>
                    <div class="card-body">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Model.StreetLine1" class="form-control" />
                            <label>Street Address</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Model.City" class="form-control" />
                            <label>City</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Model.PostalCode" class="form-control" />
                            <label>Postal Code</label>
                        </div>
                        <!-- NOTE: State and Country would ideally be dropdowns populated from the DB -->
                    </div>
                </div>
                <button type="button" class="btn btn-secondary mt-3 me-2" @onclick="() => currentStep = 1">Back</button>
                <button type="submit" class="btn btn-success mt-3">Finish and Save Profile</button>
            }
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    private int currentStep = 1;

    [SupplyParameterFromForm]
    private ProfileCompleteModel Model { get; set; } = new();

    private async Task HandleValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user is null)
        {
            NavigationManager.NavigateTo("/Account/InvalidUser");
            return;
        }

        // 1. Update the user's selected role
        user.UserType = Model.UserType;

        // 2. Create and add the new address to the user's EndUserProfile
        if (user.EndUserProfile is null)
        {
            user.EndUserProfile = new EndUserProfile();
        }

        var newAddress = new Address
        {
            Name = "Primary", // Default name for the first address
            StreetLine1 = Model.StreetLine1,
            City = Model.City,
            PostalCode = Model.PostalCode,
            Purpose = AddressPurpose.Residiential,
            // You would need to look up StateProvinceID and CountryID here
            StateProvinceID = 1//, // Placeholder
            //CountryID = 1, // Placeholder
        };

        user.EndUserProfile.Address.Add(newAddress);

        // 3. Mark the profile as complete
        user.IsProfileComplete = true;

        var result = await UserManager.UpdateAsync(user);

        if (result.Succeeded)
        {
            // Navigate to the home page with forceLoad to ensure the auth state is refreshed
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            // Handle errors
        }
    }

    public class ProfileCompleteModel
    {
        [Required]
        [EnumDataType(typeof(UserType))]
        [Range(1, int.MaxValue, ErrorMessage = "Please select a role.")]
        public UserType UserType { get; set; } = UserType.NotSet;

        [Required]
        public string StreetLine1 { get; set; } = "";

        [Required]
        public string City { get; set; } = "";

        [Required]
        [DataType(DataType.PostalCode)]
        public string PostalCode { get; set; } = "";
    }
}

